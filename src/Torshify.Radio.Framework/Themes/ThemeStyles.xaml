<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Framework="clr-namespace:Torshify.Radio.Framework"
    xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
    xmlns:input="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Input.Toolkit"
    xmlns:Controls="clr-namespace:Torshify.Radio.Framework.Controls"
    xmlns:Icons="clr-namespace:Torshify.Radio.Framework.Resources.Icons"
    xmlns:coreConverters="clr-namespace:Microsoft.Windows.Controls.Core.Converters;assembly=WPFToolkit.Extended"
    xmlns:Converters="clr-namespace:Torshify.Radio.Framework.Converters">

    <Converters:StringToUpperConverter
        x:Key="StringToUpperConverter" />
    
    <PopupAnimation
        x:Key="{x:Static SystemParameters.ToolTipPopupAnimationKey}">Slide</PopupAnimation>
    
    <Style
        x:Key="{x:Type ToolTip}"
        TargetType="ToolTip">
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="HasDropShadow"
            Value="True" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="ToolTip">
                    <Border
                        Name="Border"
                        Padding="0,0,0,0"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <Border
                            BorderBrush="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}"
                            BorderThickness="2">
                            <Grid
                                Background="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}">
                                <ContentPresenter
                                    Margin="4"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch" />
                                <Path
                                    Name="ArrowPath"
                                    Data="M0,0 L20,20 40,0"
                                    Fill="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}"
                                    Stroke="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}"
                                    StrokeThickness="2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom"
                                    Margin="0,0,0,-21"
                                    Visibility="Collapsed" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="Placement"
                            Value="Top">
                            <Setter
                                Property="Visibility"
                                Value="Visible"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Padding"
                                Value="0,0,0,20"
                                TargetName="Border" />
                        </Trigger>
                        <Trigger
                            Property="Placement"
                            Value="Bottom">
                            <Setter
                                Property="Visibility"
                                Value="Visible"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransformOrigin"
                                Value="0.5,0"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransform"
                                TargetName="ArrowPath">
                                <Setter.Value>
                                    <RotateTransform
                                        Angle="180" />
                                </Setter.Value>
                            </Setter>
                            <Setter
                                Property="VerticalAlignment"
                                Value="Top"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Padding"
                                Value="0,20,0,0"
                                TargetName="Border" />
                        </Trigger>
                        <Trigger
                            Property="Placement"
                            Value="Right">
                            <Setter
                                Property="Visibility"
                                Value="Visible"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransformOrigin"
                                Value="0,0"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransform"
                                TargetName="ArrowPath">
                                <Setter.Value>
                                    <RotateTransform
                                        Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter
                                Property="VerticalAlignment"
                                Value="Center"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="HorizontalAlignment"
                                Value="Left"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Margin"
                                Value="0,-40,0,-22"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Padding"
                                Value="20,0,0,0"
                                TargetName="Border" />
                        </Trigger>
                        <Trigger
                            Property="Placement"
                            Value="Left">
                            <Setter
                                Property="Visibility"
                                Value="Visible"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransformOrigin"
                                Value="0.5,0.5"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="RenderTransform"
                                TargetName="ArrowPath">
                                <Setter.Value>
                                    <RotateTransform
                                        Angle="270" />
                                </Setter.Value>
                            </Setter>
                            <Setter
                                Property="VerticalAlignment"
                                Value="Center"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="HorizontalAlignment"
                                Value="Right"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Margin"
                                Value="0,0,-31,0"
                                TargetName="ArrowPath" />
                            <Setter
                                Property="Padding"
                                Value="0,0,20,0"
                                TargetName="Border" />
                        </Trigger>
                        <Trigger
                            Property="HasDropShadow"
                            Value="true">
                            <Setter
                                TargetName="Border"
                                Property="SnapsToDevicePixels"
                                Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style
        TargetType="{x:Type TextBox}">
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxForegroundBrushKey}}" />
        <Setter
            Property="Background"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="SelectionBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditSelectionBrushKey}}" />
        <Setter
            Property="CaretBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextCaretBrushKey}}" />
        <Setter
            Property="BorderThickness"
            Value="1" />
        <Setter
            Property="Padding"
            Value="1" />
        <Setter
            Property="AllowDrop"
            Value="True" />
        <Setter
            Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter
            Property="ScrollViewer.PanningMode"
            Value="VerticalFirst" />
        <Setter
            Property="Stylus.IsFlicksEnabled"
            Value="False" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="IsFocused"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBackgroundBrushKey}}" />
                            <Setter
                                Property="BorderBrush"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBorderBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsReadOnly"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="False">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsReadOnly"
                Value="True">
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
            </Trigger>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate
        x:Key="DefaultWatermarkTemplate">
        <ContentControl
            Margin="2,0,2,0"
            Content="{Binding}"
            Foreground="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}"
            Focusable="False" />
    </DataTemplate>

    <Style
        TargetType="{x:Type extToolkit:WatermarkTextBox}"
        BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter
            Property="WatermarkTemplate"
            Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="Stretch" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Center" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type extToolkit:WatermarkTextBox}">
                    <Grid>
                        <Border
                            x:Name="Bd"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter
                            x:Name="PART_WatermarkHost"
                            Content="{TemplateBinding Watermark}"
                            ContentTemplate="{TemplateBinding WatermarkTemplate}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="False"
                            Margin="{TemplateBinding Padding}"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsFocused"
                                    Value="False" />
                                <Condition
                                    Property="Text"
                                    Value="" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Visibility"
                                TargetName="PART_WatermarkHost"
                                Value="Visible" />
                        </MultiTrigger>
                        <Trigger
                            Property="IsFocused"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBackgroundBrushKey}}" />
                            <Setter
                                Property="BorderBrush"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBorderBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsReadOnly"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        TargetType="{x:Type input:AutoCompleteBox}">
        <Setter
            Property="IsTabStop"
            Value="False" />
        <Setter
            Property="Padding"
            Value="2" />
        <Setter
            Property="BorderThickness"
            Value="1" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxForegroundBrushKey}}" />
        <Setter
            Property="Background"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="MinWidth"
            Value="45" />
        <Setter
            Property="TextBoxStyle"
            Value="{StaticResource {x:Type TextBox}}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type input:AutoCompleteBox}">
                    <Grid
                        Opacity="{TemplateBinding Opacity}">
                        <TextBox
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            IsTabStop="True"
                            x:Name="Text"
                            Style="{TemplateBinding TextBoxStyle}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Foreground="{TemplateBinding Foreground}"
                            Margin="0" />
                        <Popup
                            x:Name="Popup">
                            <Grid
                                Opacity="{TemplateBinding Opacity}"
                                Background="{TemplateBinding Background}">
                                <Border
                                    x:Name="PopupBorder"
                                    HorizontalAlignment="Stretch"
                                    Opacity="0"
                                    BorderThickness="0">
                                    <Border.RenderTransform>
                                        <TranslateTransform
                                            X="1"
                                            Y="1" />
                                    </Border.RenderTransform>
                                    <Border.Background>
                                        <SolidColorBrush
                                            Color="#11000000" />
                                    </Border.Background>
                                    <Border
                                        HorizontalAlignment="Stretch"
                                        Opacity="1.0"
                                        Padding="0"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="0">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform
                                                    X="-1"
                                                    Y="-1" />
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Background>
                                            <LinearGradientBrush
                                                EndPoint="0.5,1"
                                                StartPoint="0.5,0">
                                                <GradientStop
                                                    Color="#FFDDDDDD"
                                                    Offset="0" />
                                                <GradientStop
                                                    Color="#AADDDDDD"
                                                    Offset="1" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <ListBox
                                            x:Name="Selector"
                                            ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                                            ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                            Background="{TemplateBinding Background}"
                                            Foreground="{TemplateBinding Foreground}"
                                            BorderThickness="0"
                                            ItemTemplate="{TemplateBinding ItemTemplate}" />
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="PopupStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.1"
                                        To="PopupOpened" />
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.2"
                                        To="PopupClosed" />
                                </VisualStateGroup.Transitions>
                                <VisualState
                                    x:Name="PopupOpened">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1.0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="PopupClosed">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        TargetType="{x:Type Controls:WatermarkAutoCompleteBox}"
        BasedOn="{StaticResource {x:Type input:AutoCompleteBox}}">
        <Setter
            Property="WatermarkTemplate"
            Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type Controls:WatermarkAutoCompleteBox}">
                    <Grid
                        Opacity="{TemplateBinding Opacity}">
                        <TextBox
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            IsTabStop="True"
                            x:Name="Text"
                            Style="{TemplateBinding TextBoxStyle}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Foreground="{TemplateBinding Foreground}"
                            Margin="0" />
                        <ContentPresenter
                            x:Name="PART_WatermarkHost"
                            Content="{TemplateBinding Watermark}"
                            ContentTemplate="{TemplateBinding WatermarkTemplate}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="False"
                            Margin="{TemplateBinding Padding}"
                            Visibility="Collapsed" />
                        <Popup
                            x:Name="Popup">
                            <Grid
                                Opacity="{TemplateBinding Opacity}"
                                Background="{TemplateBinding Background}">
                                <Border
                                    x:Name="PopupBorder"
                                    HorizontalAlignment="Stretch"
                                    Opacity="0"
                                    BorderThickness="0">
                                    <Border.RenderTransform>
                                        <TranslateTransform
                                            X="1"
                                            Y="1" />
                                    </Border.RenderTransform>
                                    <Border.Background>
                                        <SolidColorBrush
                                            Color="#11000000" />
                                    </Border.Background>
                                    <Border
                                        HorizontalAlignment="Stretch"
                                        Opacity="1.0"
                                        Padding="0"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="0">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform
                                                    X="-1"
                                                    Y="-1" />
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Background>
                                            <LinearGradientBrush
                                                EndPoint="0.5,1"
                                                StartPoint="0.5,0">
                                                <GradientStop
                                                    Color="#FFDDDDDD"
                                                    Offset="0" />
                                                <GradientStop
                                                    Color="#AADDDDDD"
                                                    Offset="1" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <ListBox
                                            x:Name="Selector"
                                            ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                                            ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                            Background="{TemplateBinding Background}"
                                            Foreground="{TemplateBinding Foreground}"
                                            BorderThickness="0"
                                            ItemTemplate="{TemplateBinding ItemTemplate}" />
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="PopupStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.1"
                                        To="PopupOpened" />
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.2"
                                        To="PopupClosed" />
                                </VisualStateGroup.Transitions>
                                <VisualState
                                    x:Name="PopupOpened">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1.0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="PopupClosed">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsFocused"
                                    Value="False" />
                                <Condition
                                    Property="Text"
                                    Value="" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Visibility"
                                TargetName="PART_WatermarkHost"
                                Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="SearchTextBoxStyle"
        TargetType="{x:Type TextBox}"
        BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <DockPanel>
                            <Decorator
                                DockPanel.Dock="Right"
                                Width="24" />
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="IsFocused"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBackgroundBrushKey}}" />
                            <Setter
                                Property="BorderBrush"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBorderBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsReadOnly"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="False">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsReadOnly"
                Value="True">
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
            </Trigger>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        TargetType="{x:Type Controls:SearchTextBox}"
        BasedOn="{StaticResource {x:Type Controls:WatermarkAutoCompleteBox}}">
        <Setter
            Property="TextBoxStyle"
            Value="{StaticResource SearchTextBoxStyle}" />
        <Setter
            Property="SearchMode"
            Value="Delayed" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type Controls:SearchTextBox}">
                    <Grid
                        Opacity="{TemplateBinding Opacity}">
                        <TextBox
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            IsTabStop="True"
                            x:Name="Text"
                            Style="{TemplateBinding TextBoxStyle}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Foreground="{TemplateBinding Foreground}"
                            Margin="0" />
                        <Button
                            Name="PART_SearchIconButton"
                            Height="24"
                            HorizontalAlignment="Right"
                            BorderThickness="0"
                            Padding="0">
                            <Viewbox>
                                <Icons:Search
                                    x:Name="SearchIcon"
                                    Foreground="{TemplateBinding Foreground}"
                                    Background="Transparent"
                                    Cursor="Hand" />
                            </Viewbox>
                        </Button>
                        <ContentPresenter
                            x:Name="PART_WatermarkHost"
                            Content="{TemplateBinding Watermark}"
                            ContentTemplate="{TemplateBinding WatermarkTemplate}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="False"
                            Margin="{TemplateBinding Padding}"
                            Visibility="Collapsed" />
                        <Popup
                            x:Name="Popup">
                            <Grid
                                Opacity="{TemplateBinding Opacity}"
                                Background="{TemplateBinding Background}">
                                <Border
                                    x:Name="PopupBorder"
                                    HorizontalAlignment="Stretch"
                                    Opacity="0"
                                    BorderThickness="0">
                                    <Border.RenderTransform>
                                        <TranslateTransform
                                            X="1"
                                            Y="1" />
                                    </Border.RenderTransform>
                                    <Border.Background>
                                        <SolidColorBrush
                                            Color="#11000000" />
                                    </Border.Background>
                                    <Border
                                        HorizontalAlignment="Stretch"
                                        Opacity="1.0"
                                        Padding="0"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        CornerRadius="0">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <TranslateTransform
                                                    X="-1"
                                                    Y="-1" />
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Background>
                                            <LinearGradientBrush
                                                EndPoint="0.5,1"
                                                StartPoint="0.5,0">
                                                <GradientStop
                                                    Color="#FFDDDDDD"
                                                    Offset="0" />
                                                <GradientStop
                                                    Color="#AADDDDDD"
                                                    Offset="1" />
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <ListBox
                                            x:Name="Selector"
                                            ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                                            ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
                                            Background="{TemplateBinding Background}"
                                            Foreground="{TemplateBinding Foreground}"
                                            BorderThickness="0"
                                            ItemTemplate="{TemplateBinding ItemTemplate}" />
                                    </Border>
                                </Border>
                            </Grid>
                        </Popup>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup
                                x:Name="PopupStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.1"
                                        To="PopupOpened" />
                                    <VisualTransition
                                        GeneratedDuration="0:0:0.2"
                                        To="PopupClosed" />
                                </VisualStateGroup.Transitions>
                                <VisualState
                                    x:Name="PopupOpened">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1.0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState
                                    x:Name="PopupClosed">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="PopupBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsFocused"
                                    Value="False" />
                                <Condition
                                    Property="Text"
                                    Value="" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Foreground"
                                TargetName="SearchIcon"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}" />
                            <Setter
                                Property="IsEnabled"
                                TargetName="PART_SearchIconButton"
                                Value="False" />
                            <Setter
                                Property="Visibility"
                                TargetName="PART_WatermarkHost"
                                Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="{x:Type PasswordBox}"
        TargetType="{x:Type PasswordBox}">
        <Setter
            Property="Controls:PasswordBoxMonitor.IsMonitoring"
            Value="True" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxForegroundBrushKey}}" />
        <Setter
            Property="Background"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
        <Setter
            Property="SelectionBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditSelectionBrushKey}}" />
        <Setter
            Property="CaretBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.TextCaretBrushKey}}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type PasswordBox}">
                    <Border
                        Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        SnapsToDevicePixels="true">
                        <Grid>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <ContentPresenter
                                x:Name="PART_WatermarkHost"
                                Content="{Binding (Controls:PasswordBoxMonitor.Watermark), RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{StaticResource DefaultWatermarkTemplate}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                IsHitTestVisible="False"
                                Margin="{TemplateBinding Padding}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="Controls:PasswordBoxMonitor.PasswordLength"
                            Value="0">
                            <Setter
                                Property="Visibility"
                                TargetName="PART_WatermarkHost"
                                Value="Visible" />
                        </Trigger>
                        <Trigger
                            Property="IsFocused"
                            Value="True">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBackgroundBrushKey}}" />
                            <Setter
                                Property="BorderBrush"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBorderBrushKey}}" />
                            <Setter
                                Property="Visibility"
                                TargetName="PART_WatermarkHost"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="False">
                            <Setter
                                Property="Background"
                                TargetName="Bd"
                                Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        TargetType="{x:Type ButtonBase}">
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="FontFamily"
            Value="{DynamicResource {x:Static Framework:AppTheme.FontFamilySemiBold}}" />
        <Setter
            Property="FontSize"
            Value="{DynamicResource {x:Static Framework:AppTheme.FontSizeNormal}}" />
        <Setter
            Property="Padding"
            Value="4,2,4,2" />
        <Setter
            Property="BorderThickness"
            Value="2" />
        <Setter
            Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type ButtonBase}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsMouseOver"
                Value="True">
                <Setter
                    Property="Cursor"
                    Value="Hand" />
            </Trigger>
            <Trigger
                Property="ToggleButton.IsChecked"
                Value="True">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.ContrastForegroundKey}}" />
            </Trigger>
            <Trigger
                Property="IsPressed"
                Value="True">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.ContrastForegroundKey}}" />
            </Trigger>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        TargetType="{x:Type Button}"
        BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <Style
        TargetType="{x:Type ToggleButton}"
        BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <Style
        TargetType="{x:Type Controls:CircleButton}">
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.SubtleBrushKey}}" />
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Stretch" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="Stretch" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type Controls:CircleButton}">
                    <Viewbox>
                        <Grid
                            Height="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                            Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                            <Ellipse
                                Name="Circle"
                                Fill="{TemplateBinding Background}"
                                Stroke="{TemplateBinding BorderBrush}"
                                StrokeThickness="4" />
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="IsMouseOver"
                            Value="True">
                            <Setter
                                Property="BorderBrush"
                                Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
                        </Trigger>
                        <Trigger
                            Property="IsPressed"
                            Value="True">
                            <Setter
                                Property="Effect"
                                TargetName="Circle">
                                <Setter.Value>
                                    <BlurEffect
                                        Radius="4" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Geometry
        x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

    <Style
        x:Key="ComboBoxReadonlyToggleButton"
        TargetType="{x:Type ToggleButton}"
        BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter
            Property="IsTabStop"
            Value="false" />
        <Setter
            Property="Focusable"
            Value="false" />
        <Setter
            Property="ClickMode"
            Value="Press" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type ToggleButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            HorizontalAlignment="Right"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path
                                x:Name="Arrow"
                                Data="{StaticResource DownArrowGeometry}"
                                Fill="{TemplateBinding Foreground}"
                                HorizontalAlignment="Center"
                                Margin="3,1,0,0"
                                VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ComboBoxEditableTextBox"
        TargetType="{x:Type TextBox}">
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="AllowDrop"
            Value="true" />
        <Setter
            Property="MinWidth"
            Value="0" />
        <Setter
            Property="MinHeight"
            Value="0" />
        <Setter
            Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter
            Property="ScrollViewer.PanningMode"
            Value="VerticalFirst" />
        <Setter
            Property="Stylus.IsFlicksEnabled"
            Value="False" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate
        x:Key="ComboBoxEditableTemplate"
        TargetType="{x:Type ComboBox}">
        <Grid
            x:Name="Placement"
            SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="*" />
                <ColumnDefinition
                    Width="Auto" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                AllowsTransparency="true"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                Placement="Bottom">
                <Border
                    x:Name="Shdw"
                    Background="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=Placement}">
                    <Border
                        x:Name="DropDownBorder"
                        BorderBrush="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}"
                        BorderThickness="1"
                        Background="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}">
                        <ScrollViewer
                            x:Name="DropDownScrollViewer">
                            <Grid
                                RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    HorizontalAlignment="Left"
                                    Height="0"
                                    VerticalAlignment="Top"
                                    Width="0">
                                    <Rectangle
                                        x:Name="OpaqueRect"
                                        Fill="{Binding Background, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Border>
            </Popup>
            <Border
                x:Name="Border"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                Grid.ColumnSpan="2" />
            <TextBox
                x:Name="PART_EditableTextBox"
                Foreground="{TemplateBinding Foreground}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                Margin="{TemplateBinding Padding}"
                Style="{StaticResource ComboBoxEditableTextBox}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
            <ToggleButton
                Grid.Column="1"
                BorderBrush="Transparent"
                Background="Transparent"
                Foreground="{TemplateBinding Foreground}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxReadonlyToggleButton}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger
                Property="HasItems"
                Value="false">
                <Setter
                    Property="Height"
                    TargetName="DropDownBorder"
                    Value="95" />
            </Trigger>
            <Trigger
                Property="IsGrouping"
                Value="true">
                <Setter
                    Property="ScrollViewer.CanContentScroll"
                    Value="false" />
            </Trigger>
            <Trigger
                Property="ScrollViewer.CanContentScroll"
                SourceName="DropDownScrollViewer"
                Value="false">
                <Setter
                    Property="Canvas.Top"
                    TargetName="OpaqueRect"
                    Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter
                    Property="Canvas.Left"
                    TargetName="OpaqueRect"
                    Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        TargetType="{x:Type ComboBox}">
        <Setter
            Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="BorderThickness"
            Value="2" />
        <Setter
            Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Auto" />
        <Setter
            Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Auto" />
        <Setter
            Property="Padding"
            Value="4,3" />
        <Setter
            Property="ScrollViewer.CanContentScroll"
            Value="true" />
        <Setter
            Property="ScrollViewer.PanningMode"
            Value="Both" />
        <Setter
            Property="Stylus.IsFlicksEnabled"
            Value="False" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type ComboBox}">
                    <Grid
                        x:Name="MainGrid"
                        SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                Width="*" />
                            <ColumnDefinition
                                MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                Width="0" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="true"
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="1"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                            Placement="Bottom">
                            <Border
                                x:Name="Shdw"
                                Background="Transparent"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border
                                    x:Name="DropDownBorder"
                                    BorderBrush="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}"
                                    BorderThickness="1"
                                    Background="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}">
                                    <ScrollViewer
                                        x:Name="DropDownScrollViewer">
                                        <Grid
                                            RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas
                                                HorizontalAlignment="Left"
                                                Height="0"
                                                VerticalAlignment="Top"
                                                Width="0">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Fill="{Binding Background, ElementName=DropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                        <ToggleButton
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"
                            Grid.ColumnSpan="2"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxReadonlyToggleButton}" />
                        <ContentPresenter
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsHitTestVisible="false"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="HasItems"
                            Value="false">
                            <Setter
                                Property="Height"
                                TargetName="DropDownBorder"
                                Value="95" />
                        </Trigger>
                        <Trigger
                            Property="IsGrouping"
                            Value="true">
                            <Setter
                                Property="ScrollViewer.CanContentScroll"
                                Value="false" />
                        </Trigger>
                        <Trigger
                            Property="ScrollViewer.CanContentScroll"
                            SourceName="DropDownScrollViewer"
                            Value="false">
                            <Setter
                                Property="Canvas.Top"
                                TargetName="OpaqueRect"
                                Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter
                                Property="Canvas.Left"
                                TargetName="OpaqueRect"
                                Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsEditable"
                Value="True">
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxForegroundBrushKey}}" />
                <Setter
                    Property="IsTabStop"
                    Value="false" />
                <Setter
                    Property="Padding"
                    Value="3" />
                <Setter
                    Property="Template"
                    Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
            <Trigger
                Property="IsKeyboardFocusWithin"
                Value="True">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBackgroundBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditBorderBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxForegroundBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition
                        Property="IsEnabled"
                        Value="False" />
                    <Condition
                        Property="IsEditable"
                        Value="True" />
                </MultiTrigger.Conditions>
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}" />
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition
                        Property="IsEnabled"
                        Value="False" />
                    <Condition
                        Property="IsEditable"
                        Value="False" />
                </MultiTrigger.Conditions>
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ComboBox_SelectedItemInvisibleStyle"
        TargetType="{x:Type ComboBox}"
        BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type ComboBox}">
                    <Grid
                        x:Name="MainGrid"
                        SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                Width="*" />
                            <ColumnDefinition
                                MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                Width="0" />
                        </Grid.ColumnDefinitions>
                        <Popup
                            x:Name="PART_Popup"
                            AllowsTransparency="true"
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                            Margin="1"
                            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                            Placement="Bottom">
                            <Border
                                x:Name="Shdw"
                                Background="Transparent"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border
                                    x:Name="DropDownBorder"
                                    BorderBrush="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}"
                                    BorderThickness="1"
                                    Background="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}">
                                    <ScrollViewer
                                        x:Name="DropDownScrollViewer">
                                        <Grid
                                            RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas
                                                HorizontalAlignment="Left"
                                                Height="0"
                                                VerticalAlignment="Top"
                                                Width="0">
                                                <Rectangle
                                                    x:Name="OpaqueRect"
                                                    Fill="{Binding Background, ElementName=DropDownBorder}"
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter
                                                x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                        <ToggleButton
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"
                            Grid.ColumnSpan="2"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxReadonlyToggleButton}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="HasItems"
                            Value="false">
                            <Setter
                                Property="Height"
                                TargetName="DropDownBorder"
                                Value="95" />
                        </Trigger>
                        <Trigger
                            Property="IsGrouping"
                            Value="true">
                            <Setter
                                Property="ScrollViewer.CanContentScroll"
                                Value="false" />
                        </Trigger>
                        <Trigger
                            Property="ScrollViewer.CanContentScroll"
                            SourceName="DropDownScrollViewer"
                            Value="false">
                            <Setter
                                Property="Canvas.Top"
                                TargetName="OpaqueRect"
                                Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter
                                Property="Canvas.Left"
                                TargetName="OpaqueRect"
                                Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        TargetType="{x:Type TabControl}">
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="Padding"
            Value="0" />
        <Setter
            Property="BorderThickness"
            Value="0" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="Center" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Center" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TabControl}">
                    <Grid
                        ClipToBounds="true"
                        KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                x:Name="ColumnDefinition0" />
                            <ColumnDefinition
                                x:Name="ColumnDefinition1"
                                Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition
                                x:Name="RowDefinition0"
                                Height="Auto" />
                            <RowDefinition
                                x:Name="RowDefinition1"
                                Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel
                            x:Name="HeaderPanel"
                            Grid.Column="0"
                            IsItemsHost="true"
                            Margin="0,0,0,4"
                            Grid.Row="0"
                            KeyboardNavigation.TabIndex="1"
                            Panel.ZIndex="1" />
                        <Border
                            x:Name="ContentPanel"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Grid.Column="0"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            Grid.Row="1"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter
                                x:Name="PART_SelectedContentHost"
                                ContentSource="SelectedContent"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Bottom">
                            <Setter
                                Property="Grid.Row"
                                TargetName="HeaderPanel"
                                Value="1" />
                            <Setter
                                Property="Grid.Row"
                                TargetName="ContentPanel"
                                Value="0" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition0"
                                Value="*" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition1"
                                Value="Auto" />
                            <Setter
                                Property="Margin"
                                TargetName="HeaderPanel"
                                Value="2,0,2,2" />
                        </Trigger>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Left">
                            <Setter
                                Property="Grid.Row"
                                TargetName="HeaderPanel"
                                Value="0" />
                            <Setter
                                Property="Grid.Row"
                                TargetName="ContentPanel"
                                Value="0" />
                            <Setter
                                Property="Grid.Column"
                                TargetName="HeaderPanel"
                                Value="0" />
                            <Setter
                                Property="Grid.Column"
                                TargetName="ContentPanel"
                                Value="1" />
                            <Setter
                                Property="Width"
                                TargetName="ColumnDefinition0"
                                Value="Auto" />
                            <Setter
                                Property="Width"
                                TargetName="ColumnDefinition1"
                                Value="*" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition0"
                                Value="*" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition1"
                                Value="0" />
                            <Setter
                                Property="Margin"
                                TargetName="HeaderPanel"
                                Value="2,2,0,2" />
                        </Trigger>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Right">
                            <Setter
                                Property="Grid.Row"
                                TargetName="HeaderPanel"
                                Value="0" />
                            <Setter
                                Property="Grid.Row"
                                TargetName="ContentPanel"
                                Value="0" />
                            <Setter
                                Property="Grid.Column"
                                TargetName="HeaderPanel"
                                Value="1" />
                            <Setter
                                Property="Grid.Column"
                                TargetName="ContentPanel"
                                Value="0" />
                            <Setter
                                Property="Width"
                                TargetName="ColumnDefinition0"
                                Value="*" />
                            <Setter
                                Property="Width"
                                TargetName="ColumnDefinition1"
                                Value="Auto" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition0"
                                Value="*" />
                            <Setter
                                Property="Height"
                                TargetName="RowDefinition1"
                                Value="0" />
                            <Setter
                                Property="Margin"
                                TargetName="HeaderPanel"
                                Value="0,2,2,2" />
                        </Trigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="false">
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        TargetType="{x:Type TabItem}">
        <Setter
            Property="FocusVisualStyle"
            Value="{x:Null}" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.SubtleBrushKey}}" />
        <Setter
            Property="Background"
            Value="{x:Null}" />
        <Setter
            Property="Padding"
            Value="0,0,6,0" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="Stretch" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Stretch" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type TabItem}">
                    <Grid
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="Bd"
                            Padding="{TemplateBinding Padding}">
                            <ContentPresenter
                                x:Name="Content"
                                ContentSource="Header"
                                TextElement.FontSize="16"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="IsSelected"
                            Value="true">
                            <Setter
                                Property="Panel.ZIndex"
                                Value="1" />
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsSelected"
                                    Value="false" />
                                <Condition
                                    Property="IsMouseOver"
                                    Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}" />
                        </MultiTrigger>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Bottom">
                            <Setter
                                Property="BorderThickness"
                                TargetName="Bd"
                                Value="1,0,1,1" />
                        </Trigger>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Left">
                            <Setter
                                Property="BorderThickness"
                                TargetName="Bd"
                                Value="1,1,0,1" />
                        </Trigger>
                        <Trigger
                            Property="TabStripPlacement"
                            Value="Right">
                            <Setter
                                Property="BorderThickness"
                                TargetName="Bd"
                                Value="0,1,1,1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsSelected"
                                    Value="true" />
                                <Condition
                                    Property="TabStripPlacement"
                                    Value="Top" />
                            </MultiTrigger.Conditions>
                            <!--<Setter
                                Property="Margin"
                                Value="-2,-2,-2,-1" />
                            <Setter
                                Property="Margin"
                                TargetName="Content"
                                Value="0,0,0,1" />-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsSelected"
                                    Value="true" />
                                <Condition
                                    Property="TabStripPlacement"
                                    Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Margin"
                                Value="-2,-1,-2,-2" />
                            <Setter
                                Property="Margin"
                                TargetName="Content"
                                Value="0,1,0,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsSelected"
                                    Value="true" />
                                <Condition
                                    Property="TabStripPlacement"
                                    Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Margin"
                                Value="-2,-2,-1,-2" />
                            <Setter
                                Property="Margin"
                                TargetName="Content"
                                Value="0,0,1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="IsSelected"
                                    Value="true" />
                                <Condition
                                    Property="TabStripPlacement"
                                    Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Margin"
                                Value="-1,-2,-2,-2" />
                            <Setter
                                Property="Margin"
                                TargetName="Content"
                                Value="1,0,0,0" />
                        </MultiTrigger>
                        <Trigger
                            Property="IsEnabled"
                            Value="false">
                            <Setter
                                Property="Foreground"
                                Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <coreConverters:WizardPageButtonVisibilityConverter
        x:Key="WizardPageButtonVisibilityConverter" />

    <Style
        TargetType="{x:Type extToolkit:Wizard}">
        <Setter
            Property="Background"
            Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
        <Setter
            Property="Foreground"
            Value="{DynamicResource {x:Static Framework:AppTheme.ForegroundBrushKey}}" />
        <Setter
            Property="BorderThickness"
            Value="1" />
        <Setter
            Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type extToolkit:Wizard}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid
                            Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition
                                    Height="*" />
                                <RowDefinition
                                    Height="Auto" />
                            </Grid.RowDefinitions>

                            <ContentPresenter
                                Content="{Binding CurrentPage, RelativeSource={RelativeSource TemplatedParent}}" />

                            <Border
                                Grid.Row="1"
                                Background="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}"
                                BorderBrush="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}"
                                BorderThickness="0,1,0,0"
                                Padding="7">
                                <StackPanel
                                    Background="{TemplateBinding Background}">
                                    <Grid
                                        Margin="{TemplateBinding Padding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition
                                                Width="Auto" />
                                            <ColumnDefinition
                                                Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Button
                                            Name="PART_HelpButton"
                                            Grid.Column="0"
                                            MinWidth="75"
                                            Command="extToolkit:WizardCommands.Help"
                                            Content="{TemplateBinding HelpButtonContent}">
                                            <Button.Visibility>
                                                <MultiBinding
                                                    Converter="{StaticResource WizardPageButtonVisibilityConverter}">
                                                    <Binding
                                                        RelativeSource="{RelativeSource TemplatedParent}"
                                                        Path="HelpButtonVisibility" />
                                                    <Binding
                                                        RelativeSource="{RelativeSource TemplatedParent}"
                                                        Path="CurrentPage.HelpButtonVisibility" />
                                                </MultiBinding>
                                            </Button.Visibility>
                                        </Button>
                                        <StackPanel
                                            Grid.Column="1"
                                            Orientation="Horizontal"
                                            HorizontalAlignment="Right">
                                            <Button
                                                Name="PART_CancelButton"
                                                Margin="0,0,7,0"
                                                MinWidth="75"
                                                Command="extToolkit:WizardCommands.Cancel"
                                                Content="{TemplateBinding CancelButtonContent}">
                                                <Button.Visibility>
                                                    <MultiBinding
                                                        Converter="{StaticResource WizardPageButtonVisibilityConverter}">
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="CancelButtonVisibility" />
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="CurrentPage.CancelButtonVisibility" />
                                                    </MultiBinding>
                                                </Button.Visibility>
                                            </Button>
                                            <Button
                                                Name="PART_BackButton"
                                                MinWidth="75"
                                                Command="extToolkit:WizardCommands.PreviousPage"
                                                Content="{TemplateBinding BackButtonContent}">
                                                <Button.Visibility>
                                                    <MultiBinding
                                                        Converter="{StaticResource WizardPageButtonVisibilityConverter}">
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="BackButtonVisibility" />
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="CurrentPage.BackButtonVisibility" />
                                                    </MultiBinding>
                                                </Button.Visibility>
                                            </Button>
                                            <Button
                                                Name="PART_NextButton"
                                                Margin="2,0,0,0"
                                                MinWidth="75"
                                                Command="extToolkit:WizardCommands.NextPage"
                                                Content="{TemplateBinding NextButtonContent}">
                                                <Button.Visibility>
                                                    <MultiBinding
                                                        Converter="{StaticResource WizardPageButtonVisibilityConverter}">
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="NextButtonVisibility" />
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="CurrentPage.NextButtonVisibility" />
                                                    </MultiBinding>
                                                </Button.Visibility>
                                            </Button>
                                            <Button
                                                Name="PART_FinishButton"
                                                Margin="7,0,0,0"
                                                MinWidth="75"
                                                Command="extToolkit:WizardCommands.Finish"
                                                Content="{TemplateBinding FinishButtonContent}">
                                                <Button.Visibility>
                                                    <MultiBinding
                                                        Converter="{StaticResource WizardPageButtonVisibilityConverter}">
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="FinishButtonVisibility" />
                                                        <Binding
                                                            RelativeSource="{RelativeSource TemplatedParent}"
                                                            Path="CurrentPage.FinishButtonVisibility" />
                                                    </MultiBinding>
                                                </Button.Visibility>
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate
        x:Key="BlankWizardPageTemplate"
        TargetType="{x:Type extToolkit:WizardPage}">
        <Border
            SnapsToDevicePixels="true"
            Background="{TemplateBinding Background}"
            BorderThickness="{TemplateBinding BorderThickness}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid
                Background="{TemplateBinding Background}">
                <ContentPresenter
                    Margin="14"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate
        x:Key="ExteriorWizardPageTemplate"
        TargetType="{x:Type extToolkit:WizardPage}">
        <Grid
            Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="Auto" />
                <ColumnDefinition
                    Width="*" />
            </Grid.ColumnDefinitions>
            <Border
                SnapsToDevicePixels="true"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}">
                <Grid
                    Grid.Column="0"
                    Background="{TemplateBinding ExteriorPanelBackground}"
                    MinWidth="{Binding ExteriorPanelMinWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=extToolkit:Wizard}}">
                    <ContentControl
                        Content="{TemplateBinding ExteriorPanelContent}" />
                </Grid>
            </Border>
            <Grid
                Column="1"
                Margin="14">
                <Grid.RowDefinitions>
                    <RowDefinition
                        Height="Auto" />
                    <RowDefinition
                        Height="Auto" />
                    <RowDefinition
                        Height="*" />
                </Grid.RowDefinitions>
                <TextBlock
                    Grid.Row="0"
                    TextWrapping="Wrap"
                    Margin="0,0,0,14"
                    FontSize="16"
                    FontWeight="Bold"
                    Text="{TemplateBinding Title}" />
                <TextBlock
                    Grid.Row="1"
                    TextWrapping="Wrap"
                    Margin="0,0,0,14"
                    Text="{TemplateBinding Description}" />
                <ContentPresenter
                    Grid.Row="2"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
            </Grid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate
        x:Key="InteriorWizardPageTemplate"
        TargetType="{x:Type extToolkit:WizardPage}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition
                    Height="Auto" />
                <RowDefinition
                    Height="*" />
            </Grid.RowDefinitions>

            <Grid
                Background="{TemplateBinding HeaderBackground}"
                MinHeight="56">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="*" />
                    <ColumnDefinition
                        Width="Auto" />
                </Grid.ColumnDefinitions>
                <StackPanel>
                    <TextBlock
                        Margin="16,9,0,1"
                        TextWrapping="Wrap"
                        FontFamily="{DynamicResource {x:Static Framework:AppTheme.FontFamilyLight}}"
                        FontSize="{DynamicResource {x:Static Framework:AppTheme.FontSizeLarge}}"
                        Text="{TemplateBinding Title}" />
                    <TextBlock
                        Margin="32,0,0,3"
                        TextWrapping="Wrap"
                        FontFamily="{DynamicResource {x:Static Framework:AppTheme.FontFamilySemiBold}}"
                        Text="{Binding Description, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource StringToUpperConverter}}" />
                </StackPanel>
                <Image
                    Grid.Column="1"
                    Margin="4"
                    Source="{TemplateBinding HeaderImage}"
                    Stretch="None"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center" />
            </Grid>

            <Border
                Grid.Row="1"
                SnapsToDevicePixels="true"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}">
                <Grid
                    Background="{TemplateBinding Background}">
                    <ContentPresenter
                        Margin="14"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>

    <Style
        TargetType="{x:Type extToolkit:WizardPage}">
        <Style.Triggers>
            <Trigger
                Property="PageType"
                Value="Blank">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
                <Setter
                    Property="BorderThickness"
                    Value="0" />
                <Setter
                    Property="Template"
                    Value="{StaticResource BlankWizardPageTemplate}" />
            </Trigger>
            <Trigger
                Property="PageType"
                Value="Exterior">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
                <Setter
                    Property="BorderThickness"
                    Value="0" />
                <Setter
                    Property="ExteriorPanelBackground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
                <Setter
                    Property="Template"
                    Value="{StaticResource ExteriorWizardPageTemplate}" />
            </Trigger>
            <Trigger
                Property="PageType"
                Value="Interior">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{x:Static SystemColors.ActiveBorderBrush}" />
                <Setter
                    Property="BorderThickness"
                    Value="0,1,0,0" />
                <Setter
                    Property="HeaderBackground"
                    Value="{DynamicResource {x:Static Framework:AppTheme.BackgroundBrushKey}}" />
                <Setter
                    Property="Template"
                    Value="{StaticResource InteriorWizardPageTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="ScrollBarPageButton"
        TargetType="{x:Type RepeatButton}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="True" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="IsTabStop"
            Value="false" />
        <Setter
            Property="Focusable"
            Value="false" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type RepeatButton}">
                    <Border
                        Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="ScrollBarThumb"
        TargetType="{x:Type Thumb}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="True" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="IsTabStop"
            Value="false" />
        <Setter
            Property="Focusable"
            Value="false" />
        <Setter
            Property="Opacity"
            Value="0.6" />
        <Setter
            Property="Background"
            Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
        <Setter
            Property="BorderBrush"
            Value="{DynamicResource {x:Static Framework:AppTheme.DisabledBrushKey}}" />
        <Setter
            Property="BorderThickness"
            Value="0" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type Thumb}">
                    <Border
                        CornerRadius="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger
                Property="IsMouseOver"
                Value="True">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.TextBoxBrushKey}}" />
            </Trigger>
            <Trigger
                Property="IsDragging"
                Value="True">
                <Setter
                    Property="Background"
                    Value="{DynamicResource {x:Static Framework:AppTheme.SubtleBrushKey}}" />
                <Setter
                    Property="BorderBrush"
                    Value="{DynamicResource {x:Static Framework:AppTheme.SubtleBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate
        x:Key="VerticalScrollBar"
        TargetType="{x:Type ScrollBar}">
        <Track
            Name="PART_Track"
            IsDirectionReversed="true">
            <Track.DecreaseRepeatButton>
                <RepeatButton
                    Style="{StaticResource ScrollBarPageButton}"
                    Command="ScrollBar.PageUpCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb
                    Style="{StaticResource ScrollBarThumb}"
                    Margin="1,0,1,0" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton
                    Style="{StaticResource ScrollBarPageButton}"
                    Command="ScrollBar.PageDownCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>

    <ControlTemplate
        x:Key="HorizontalScrollBar"
        TargetType="{x:Type ScrollBar}">
        <Track
            Name="PART_Track"
            IsDirectionReversed="False">
            <Track.DecreaseRepeatButton>
                <RepeatButton
                    Style="{StaticResource ScrollBarPageButton}"
                    Command="ScrollBar.PageLeftCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb
                    Style="{StaticResource ScrollBarThumb}"
                    Margin="0,1,0,1" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton
                    Style="{StaticResource ScrollBarPageButton}"
                    Command="ScrollBar.PageRightCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>

    <Style
        x:Key="{x:Type ScrollBar}"
        TargetType="{x:Type ScrollBar}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="True" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Style.Triggers>
            <Trigger
                Property="Orientation"
                Value="Horizontal">
                <Setter
                    Property="Width"
                    Value="Auto" />
                <Setter
                    Property="Height"
                    Value="12" />
                <Setter
                    Property="Template"
                    Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger
                Property="Orientation"
                Value="Vertical">
                <Setter
                    Property="Width"
                    Value="12" />
                <Setter
                    Property="Height"
                    Value="Auto" />
                <Setter
                    Property="Template"
                    Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        TargetType="{x:Type ScrollViewer}">
        <Setter
            Property="OverridesDefaultStyle"
            Value="True" />
    </Style>

    <Style
        x:Key="SliderButtonStyle"
        TargetType="{x:Type RepeatButton}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="true" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="IsTabStop"
            Value="false" />
        <Setter
            Property="Focusable"
            Value="false" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type RepeatButton}">
                    <Border
                        Background="Transparent"
                        VerticalAlignment="Stretch">
                        <Rectangle
                            Fill="{TemplateBinding Background}"
                            Height="4" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="SliderThumbStyle"
        TargetType="{x:Type Thumb}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="true" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Setter
            Property="Height"
            Value="4" />
        <Setter
            Property="Width"
            Value="4" />
        <Setter
            Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="{x:Type Thumb}">
                    <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0,0,1,0"
                        Background="{TemplateBinding Background}">
                        <Border.RenderTransform>
                            <TranslateTransform
                                X="0" />
                        </Border.RenderTransform>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Template when the orientation of the Slider is Horizontal.-->
    <ControlTemplate
        x:Key="HorizontalSlider"
        TargetType="{x:Type Slider}">
        <Grid
            Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition
                    Height="Auto" />
                <RowDefinition
                    Height="Auto"
                    MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition
                    Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar
                x:Name="TopTick"
                SnapsToDevicePixels="True"
                Placement="Top"
                Height="4"
                Visibility="Collapsed"
                Fill="Red">
            </TickBar>
            <Border
                x:Name="TrackBackground"
                CornerRadius="0"
                Margin="4,0,0,0"
                Height="4"
                Grid.Row="1"
                BorderThickness="0"
                Background="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}" />
            <Track
                Grid.Row="1"
                x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton
                        Style="{StaticResource SliderButtonStyle}"
                        Command="Slider.DecreaseLarge"
                        Background="Transparent" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        x:Name="thumb"
                        Style="{StaticResource SliderThumbStyle}"
                        BorderBrush="{DynamicResource {x:Static Framework:AppTheme.ContrastForegroundKey}}"
                        Background="Transparent" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton
                        x:Name="repeatButton"
                        Style="{StaticResource SliderButtonStyle}"
                        Command="Slider.IncreaseLarge"
                        Background="{DynamicResource {x:Static Framework:AppTheme.TextBoxEditReadOnlyBrushKey}}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar
                x:Name="BottomTick"
                SnapsToDevicePixels="True"
                Grid.Row="2"
                Fill="{TemplateBinding Foreground}"
                Placement="Bottom"
                Height="4"
                Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger
                Property="IsMouseOver"
                Value="True">
                <Setter
                    Property="Height"
                    TargetName="thumb"
                    Value="12" />
                <Setter
                    Property="Background"
                    TargetName="thumb"
                    Value="{DynamicResource {x:Static Framework:AppTheme.ContrastBackgroundKey}}" />
            </Trigger>
            <Trigger
                Property="TickPlacement"
                Value="TopLeft">
                <Setter
                    TargetName="TopTick"
                    Property="Visibility"
                    Value="Visible" />
            </Trigger>
            <Trigger
                Property="TickPlacement"
                Value="BottomRight">
                <Setter
                    TargetName="BottomTick"
                    Property="Visibility"
                    Value="Visible" />
            </Trigger>
            <Trigger
                Property="TickPlacement"
                Value="Both">
                <Setter
                    TargetName="TopTick"
                    Property="Visibility"
                    Value="Visible" />
                <Setter
                    TargetName="BottomTick"
                    Property="Visibility"
                    Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        TargetType="{x:Type Slider}">
        <Setter
            Property="SnapsToDevicePixels"
            Value="true" />
        <Setter
            Property="OverridesDefaultStyle"
            Value="true" />
        <Style.Triggers>
            <Trigger
                Property="Orientation"
                Value="Horizontal">
                <Setter
                    Property="MinWidth"
                    Value="104" />
                <Setter
                    Property="MinHeight"
                    Value="12" />
                <Setter
                    Property="Template"
                    Value="{StaticResource HorizontalSlider}" />
            </Trigger>
            <!--<Trigger
                Property="Orientation"
                Value="Vertical">
                <Setter
                    Property="MinWidth"
                    Value="21" />
                <Setter
                    Property="MinHeight"
                    Value="104" />
                <Setter
                    Property="Template"
                    Value="{StaticResource VerticalSlider}" />
            </Trigger>-->
        </Style.Triggers>
    </Style>

    <Style
        TargetType="{x:Type Controls:DragSlider}"
        BasedOn="{StaticResource {x:Type Slider}}">
        <Setter
            Property="IsMoveToPointEnabled"
            Value="True" />
    </Style>

</ResourceDictionary>